#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef NASWALLKIT_SWIFT_H
#define NASWALLKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NasWallKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
@class NSError;
enum NasWallTheme : NSInteger;
@class UIView;
@class NasWallPointInfo;
enum NasWallAdListType : NSInteger;
@class NasWallAdInfo;
@class NasWallItemInfo;
SWIFT_CLASS("_TtC10NasWallKit7NasWall")
@interface NasWall : NSObject
/// SDK를 초기화합니다. (개발자 서버에서 적립금 관리 시 사용)
/// important:
/// SDK의 다른 모든 함수를 호출하기 전에 이 초기화 함수를 가장 먼저 호출해야합니다.
/// important:
/// 앱 내에서 회원이 로그아웃 후 다른 계정으로 로그인하는 경우, 새로 로그인한 회원 정보를 기준으로 다시 초기화 함수를 호출해야합니다.
/// “적립금 관리 서버”가 “NAS 서버 사용”으로 설정된 경우에만 사용합니다.  “적립금 관리 서버” 설정은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 설정을 통해 확인 및 변경할 수 있습니다.
/// \code
/// NasWall.initialize("32자리 앱 KEY", userData: "회원 데이터", testMode: false) { error in
///     if error == nil {
///         // 초기화 성공 시 처리 코드
///     } else {
///         // 초기화 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param appKey 앱의 32자리 고유 키를 지정합니다.
/// NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 확인할 수 있습니다.
///
/// \param userData 회원 ID 등의 적립금 지급에 필요한 고유한 회원 정보를 지정합니다.
/// 광고 참여 완료 시 개발자 서버로 콜백 호출될 때 함께 제공됩니다.
///
/// \param testMode <code>true</code> 로 설정 시 테스트 광고가 표시됩니다.
///
/// \param handler 초기화 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 초기화 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)initialize:(NSString * _Nonnull)appKey userData:(NSString * _Nonnull)userData testMode:(BOOL)testMode handler:(void (^ _Nullable)(NSError * _Nullable))handler;
/// SDK를 초기화합니다. (NAS 서버에서 적립금 관리 시 사용)
/// important:
/// SDK의 다른 모든 함수를 호출하기 전에 이 초기화 함수를 가장 먼저 호출해야합니다.
/// important:
/// 앱 내에서 회원이 로그아웃 후 다른 계정으로 로그인하는 경우, 새로 로그인한 회원 정보를 기준으로 다시 초기화 함수를 호출해야합니다.
/// “적립금 관리 서버”가 “NAS 서버 사용”으로 설정된 경우에만 사용합니다.  “적립금 관리 서버” 설정은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 설정을 통해 확인 및 변경할 수 있습니다.
/// \code
/// NasWall.initialize("32자리 앱 KEY", userId: "회원 ID", testMode: false) { error in
///     if error == nil {
///         // 초기화 성공 시 처리 코드
///     } else {
///         // 초기화 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param appKey 앱의 32자리 고유 키를 지정합니다.
/// NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 확인할 수 있습니다.
///
/// \param userId 회원의 고유한 ID를 지정합니다. “적립금 조회”, “아이템 구입” 시 여기서 지정한 회원 ID를 기준으로 적용됩니다.
///
/// \param testMode <code>true</code> 로 설정 시 테스트 광고가 표시됩니다.
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 초기화 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)initialize:(NSString * _Nonnull)appKey userId:(NSString * _Nonnull)userId testMode:(BOOL)testMode handler:(void (^ _Nullable)(NSError * _Nullable))handler;
/// 테마(라이트/다크 모드)를 설정합니다.
/// \code
/// // 라이트 테마
/// NasWall.theme(.light)
///
/// // 다크 테마
/// NasWall.theme(.dark)
///
/// \endcode\param theme 테마를 지정합니다.
///
+ (void)theme:(enum NasWallTheme)theme;
/// 팝업 오퍼월(전체 화면)을 표시합니다.
/// 오퍼월의 표시 색상 및 스타일은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 변경할 수 있습니다.
/// \code
/// NasWall.openPopupOfferWall { error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// } closeHandler: {
///     // 오퍼월 종료 시 처리 코드
/// }
///
/// \endcode\param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 오퍼월 열기 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
/// \param closeHandler 오퍼월이 종료된 후 호출되는 핸들러입니다.
///
+ (void)openPopupOfferWall:(void (^ _Nonnull)(NSError * _Nullable))handler closeHandler:(void (^ _Nullable)(void))closeHandler;
/// 제공된 <code>UIView</code>에 임베드 오퍼월을 표시합니다.
/// 오퍼월의 표시 색상 및 스타일은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 변경할 수 있습니다.
/// \code
/// struct EmbedOffer: UIViewRepresentable {
///     func makeUIView(context: Context) -> UIView {
///         let uiView = UIView()
///         NasWall.embedOfferWall(uiView) { error in
///             if error == nil {
///                 // 성공 시 처리 코드
///             } else {
///                 // 실패 시 처리 코드
///             }
///         }
///         return uiView
///     }
///
///     func updateUIView(_ uiView: UIView, context: Context) { }
/// }
///
/// // View 에서 사용
/// VStack {
///     EmbedOfferWall()
/// }
///
/// \endcode\param parent 임베드 오퍼월을 표시 할 <code>UIView</code> 객체를 지정합니다.
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 오퍼월 표시 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)embedOfferWall:(UIView * _Nonnull)parent handler:(void (^ _Nonnull)(NSError * _Nullable))handler;
/// 획득 가능한 총 적립금을 조회합니다.
/// \code
/// NasWall.totalPoint { pointInfo, error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>pointInfo</code>: 조회 성공 시 적립금 정보가 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 조회 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)totalPoint:(void (^ _Nonnull)(NasWallPointInfo * _Nullable, NSError * _Nullable))handler;
/// 광고 목록을 조회합니다. (개발자 정의 UI 전용)
/// important:
/// Swift UI Preview 상태에서는 라이브 데이터가 아닌 Preview 전용 데이터가 조회됩니다.
/// \code
/// NasWall.adList(.basic) { adList, error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param listType 조회 할 광고 목록 구분을 지정합니다.
/// <ul>
///   <li>
///     <code>.basic</code>: 참여적립 광고 목록 (CPI, CPE, CPA, CPC 등)
///   </li>
///   <li>
///     <code>.cps</code>: 쇼핑적립 광고 목록 (CPS)
///   </li>
///   <li>
///     <code>.cpq</code>: 퀴즈적립 광고 목록 (CPQ)
///   </li>
/// </ul>
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>adList</code>: 조회 성공 시 광고 목록이 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 조회 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)adList:(enum NasWallAdListType)listType handler:(void (^ _Nonnull)(NSArray<NasWallAdInfo *> * _Nullable, NSError * _Nullable))handler;
/// 광고 상세 설명을 조회합니다. (개발자 정의 UI 전용)
/// important:
/// Swift UI Preview 상태에서는 라이브 데이터가 아닌 Preview 전용 데이터가 조회됩니다.
/// \code
/// NasWall.adDescription(adInfo) { description, error in
///    if error == nil {
///        // 성공 시 처리 코드
///    } else {
///        // 실패 시 처리 코드
///    }
/// }
///
/// \endcode\param adInfo 광고 목록 조회 (<code>NasWall.adList()</code>) 함수를 통해 획득한 광고 목록 중 조회할 광고 정보를 지정합니다.
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>description</code>: 조회 성공 시 광고 상세 정보가 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 조회 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)adDescription:(NasWallAdInfo * _Nonnull)adInfo handler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))handler;
/// 광고에 참여합니다. (개발자 정의 UI 전용)
/// important:
/// Swift UI Preview 상태에서는 참여할 수 없습니다. 또한 시뮬레이터에서는 광고주 식별자(IDFA) 값이 없기 때문에 참여 시 오류가 발생합니다.
/// \code
/// NasWall.joinAd(adInfo) { error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param adInfo 광고 목록 조회 (<code>NasWall.adList()</code>) 함수를 통해 획득한 광고 목록 중 참여할 광고 정보를 지정합니다.
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 참여 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)joinAd:(NasWallAdInfo * _Nonnull)adInfo handler:(void (^ _Nonnull)(NSError * _Nullable))handler;
/// 회원 보유 적립금을 조회합니다. (NAS 서버에서 적립금 관리 시 사용)
/// important:
/// 초기화 (<code>NasWall.initialize()</code>) 함수를 통해 지정한 회원 ID (userId) 를 기준으로 조회됩니다.
/// important:
/// Swift UI Preview 상태에서는 라이브 데이터가 아닌 Preview 전용 데이터가 조회됩니다.
/// “적립금 관리 서버”가 “NAS 서버 사용”으로 설정된 경우에만 사용합니다.  “적립금 관리 서버” 설정은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 설정을 통해 확인 및 변경할 수 있습니다.
/// \code
/// NasWall.userPoint { pointInfo, error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>pointInfo</code>: 조회 성공 시 적립금 정보가 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 조회 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)userPoint:(void (^ _Nonnull)(NasWallPointInfo * _Nullable, NSError * _Nullable))handler;
/// 아이템 목록을 조회합니다. (NAS 서버에서 적립금 관리 시 사용)
/// important:
/// Swift UI Preview 상태에서는 라이브 데이터가 아닌 Preview 전용 데이터가 조회됩니다.
/// “적립금 관리 서버”가 “NAS 서버 사용”으로 설정된 경우에만 사용합니다.  “적립금 관리 서버” 설정은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 설정을 통해 확인 및 변경할 수 있습니다.
/// \code
/// NasWall.itemList { itemList, error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>itemList</code>: 조회 성공 시 아이템 목록이 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 조회 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)itemList:(void (^ _Nonnull)(NSArray<NasWallItemInfo *> * _Nullable, NSError * _Nullable))handler;
/// 회원 보유 적립금을 사용하여 아이템을 구입합니다. (NAS 서버에서 적립금 관리 시 사용)
/// important:
/// 초기화 (<code>NasWall.initialize()</code>) 함수를 통해 지정한 회원 ID (userId) 를 기준으로 구입됩니다.
/// important:
/// Swift UI Preview 상태에서는 구입할 수 없습니다.
/// “적립금 관리 서버”가 “NAS 서버 사용”으로 설정된 경우에만 사용합니다.  “적립금 관리 서버” 설정은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 설정을 통해 확인 및 변경할 수 있습니다.
/// \code
/// NasWall.purchaseItem(itemId, qty: 1) { pointInfo, error in
///     if error == nil {
///         // 성공 시 실행 코드
///     } else {
///         // 실패 시 실행 코드
///     }
/// }
///
/// \endcode\param itemId 구입 할 아이템 ID를 지정합니다. NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 아이템을 등록하면, 아이템 ID를 확인할 수 있습니다.
///
/// \param qty 구입 수량을 지정합니다.
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>pointInfo</code>: 구입 성공 시 구입 금액을 차감한 잔여 적립금 정보가 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 구입 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)purchaseItem:(NSInteger)itemId qty:(NSInteger)qty handler:(void (^ _Nonnull)(NasWallPointInfo * _Nullable, NSError * _Nullable))handler;
/// 문의하기(전체 화면)를 표시합니다.
/// 임베드 오퍼월, 개발자 정의 UI 구현 시 회원에게 문의하기 기능을 제공합니다.
/// \code
/// NasWall.openCs { error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// } closeHandler: {
///     // 문의하기 종료 시 처리 코드
/// }
///
/// \endcode\param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 문의하기 열기 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
/// \param closeHandler 문의하기가 종료된 후 호출되는 핸들러입니다.
///
+ (void)openCs:(void (^ _Nonnull)(NSError * _Nullable))handler closeHandler:(void (^ _Nullable)(void))closeHandler;
/// Preview 모드에서 Preview 전용 데이터 로드 시 지연 시간(초)을 설정합니다.
/// Preview 상태에서 데이터 로드 시 로딩 화면 표시를 확인하기 위해 사용합니다.
/// \code
/// NasWall.debugPreviewDataDelaySeconds(1)
///
/// \endcode\param seconds 지연 시간(초)을 지정합니다.
///
+ (void)debugPreviewDataDelaySeconds:(double)seconds;
/// Preview 모드에서 Preview 전용 데이터 로드 시 강제로 실패 처리할지 여부를 설정합니다.
/// Preview 상태에서 데이터 로드 실패 시의 화면 표시를 확인하기 위해 사용합니다.
/// \code
/// NasWall.debugPreviewDataForceFail(true)
///
/// \endcode\param forceFail 강제 실패 여부를 지정합니다.
///
+ (void)debugPreviewDataForceFail:(BOOL)forceFail;
/// 전체 화면으로 표시되는 로딩을 표시합니다.
/// \code
/// NasWall.showLoading()
///
/// \endcode
+ (void)showLoading;
/// 전체 화면으로 표시되는 로딩을 숨김니다.
/// \code
/// NasWall.hideLoading()
///
/// \endcode
+ (void)hideLoading;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 광고 카테고리
typedef SWIFT_ENUM(NSInteger, NasWallAdCategory, open) {
/// 앱
  NasWallAdCategoryApp = 1,
/// SNS
  NasWallAdCategorySns = 2,
/// WEB
  NasWallAdCategoryWeb = 3,
/// CPS
  NasWallAdCategoryCps = 4,
/// CPQ
  NasWallAdCategoryCpq = 5,
};

@class NasWallAdInfoInternal;
/// 광고 정보
SWIFT_CLASS("_TtC10NasWallKit13NasWallAdInfo")
@interface NasWallAdInfo : NSObject
/// ID
@property (nonatomic, readonly) NSInteger id;
/// 광고명
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// 미션
@property (nonatomic, readonly, copy) NSString * _Nonnull missionText;
/// 아이콘 URL
@property (nonatomic, readonly, copy) NSString * _Nonnull iconUrl;
/// 참여 비용
@property (nonatomic, readonly, copy) NSString * _Nonnull adPrice;
/// 적립금
@property (nonatomic, readonly) NSInteger rewardPrice;
/// 적립금 단위
@property (nonatomic, readonly, copy) NSString * _Nonnull rewardUnit;
/// 카테고리
@property (nonatomic, readonly) enum NasWallAdCategory category;
/// internal
@property (nonatomic, readonly, strong) NasWallAdInfoInternal * _Nonnull _internal;
/// Dictionary 로 변환
- (NSDictionary<NSString *, id> * _Nonnull)asDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// internal
SWIFT_CLASS("_TtC10NasWallKit21NasWallAdInfoInternal")
@interface NasWallAdInfoInternal : NSObject
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAk:(NSString * _Nonnull)ak ajsid:(NSInteger)ajsid atcid:(NSInteger)atcid tctid:(NSInteger)tctid ioclt:(BOOL)ioclt io:(BOOL)io pid:(NSString * _Nullable)pid us:(NSString * _Nullable)us OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)asDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 광고 목록 구분
typedef SWIFT_ENUM(NSInteger, NasWallAdListType, open) {
/// 참여적립 (CPI, CPE, CPA, CPC 등)
  NasWallAdListTypeBasic = 0,
/// 쇼핑적립 (CPS)
  NasWallAdListTypeCps = 1,
/// 퀴즈적립 (CPQ)
  NasWallAdListTypeCpq = 2,
};

/// 아이템 정보
SWIFT_CLASS("_TtC10NasWallKit15NasWallItemInfo")
@interface NasWallItemInfo : NSObject
/// ID
@property (nonatomic, readonly) NSInteger id;
/// 이름
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// 가격
@property (nonatomic, readonly) NSInteger price;
/// 가격 단위
@property (nonatomic, readonly, copy) NSString * _Nonnull unit;
/// Dictionary 로 변환
- (NSDictionary<NSString *, id> * _Nonnull)asDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC10NasWallKit16NasWallPointInfo")
@interface NasWallPointInfo : NSObject
/// 적립금
@property (nonatomic, readonly) NSInteger point;
/// 적립금 단위
@property (nonatomic, readonly, copy) NSString * _Nonnull unit;
/// 적립금 및 단위 텍스트
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
/// Dictionary 로 변환
- (NSDictionary<NSString *, id> * _Nonnull)asDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, NasWallTheme, open) {
  NasWallThemeLight = 0,
  NasWallThemeDark = 1,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef NASWALLKIT_SWIFT_H
#define NASWALLKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NasWallKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
@class NSError;
enum NasWallTheme : NSInteger;
@class UIView;
@class NasWallPointInfo;
enum NasWallAdListType : NSInteger;
@class NasWallAdInfo;
@class NasWallItemInfo;
SWIFT_CLASS("_TtC10NasWallKit7NasWall")
@interface NasWall : NSObject
/// SDK를 초기화합니다. (개발자 서버에서 적립금 관리 시 사용)
/// important:
/// SDK의 다른 모든 함수를 호출하기 전에 이 초기화 함수를 가장 먼저 호출해야합니다.
/// important:
/// 앱 내에서 회원이 로그아웃 후 다른 계정으로 로그인하는 경우, 새로 로그인한 회원 정보를 기준으로 다시 초기화 함수를 호출해야합니다.
/// “적립금 관리 서버”가 “NAS 서버 사용”으로 설정된 경우에만 사용합니다.  “적립금 관리 서버” 설정은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 설정을 통해 확인 및 변경할 수 있습니다.
/// \code
/// NasWall.initialize("32자리 앱 KEY", userData: "회원 데이터", testMode: false) { error in
///     if error == nil {
///         // 초기화 성공 시 처리 코드
///     } else {
///         // 초기화 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param appKey 앱의 32자리 고유 키를 지정합니다.
/// NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 확인할 수 있습니다.
///
/// \param userData 회원 ID 등의 적립금 지급에 필요한 고유한 회원 정보를 지정합니다.
/// 광고 참여 완료 시 개발자 서버로 콜백 호출될 때 함께 제공됩니다.
///
/// \param testMode <code>true</code> 로 설정 시 테스트 광고가 표시됩니다.
///
/// \param handler 초기화 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 초기화 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)initialize:(NSString * _Nonnull)appKey userData:(NSString * _Nonnull)userData testMode:(BOOL)testMode handler:(void (^ _Nullable)(NSError * _Nullable))handler;
/// SDK를 초기화합니다. (NAS 서버에서 적립금 관리 시 사용)
/// important:
/// SDK의 다른 모든 함수를 호출하기 전에 이 초기화 함수를 가장 먼저 호출해야합니다.
/// important:
/// 앱 내에서 회원이 로그아웃 후 다른 계정으로 로그인하는 경우, 새로 로그인한 회원 정보를 기준으로 다시 초기화 함수를 호출해야합니다.
/// “적립금 관리 서버”가 “NAS 서버 사용”으로 설정된 경우에만 사용합니다.  “적립금 관리 서버” 설정은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 설정을 통해 확인 및 변경할 수 있습니다.
/// \code
/// NasWall.initialize("32자리 앱 KEY", userId: "회원 ID", testMode: false) { error in
///     if error == nil {
///         // 초기화 성공 시 처리 코드
///     } else {
///         // 초기화 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param appKey 앱의 32자리 고유 키를 지정합니다.
/// NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 확인할 수 있습니다.
///
/// \param userId 회원의 고유한 ID를 지정합니다. “적립금 조회”, “아이템 구입” 시 여기서 지정한 회원 ID를 기준으로 적용됩니다.
///
/// \param testMode <code>true</code> 로 설정 시 테스트 광고가 표시됩니다.
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 초기화 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)initialize:(NSString * _Nonnull)appKey userId:(NSString * _Nonnull)userId testMode:(BOOL)testMode handler:(void (^ _Nullable)(NSError * _Nullable))handler;
/// 테마(라이트/다크 모드)를 설정합니다.
/// \code
/// // 라이트 테마
/// NasWall.theme(.light)
///
/// // 다크 테마
/// NasWall.theme(.dark)
///
/// \endcode\param theme 테마를 지정합니다.
///
+ (void)theme:(enum NasWallTheme)theme;
/// 팝업 오퍼월(전체 화면)을 표시합니다.
/// 오퍼월의 표시 색상 및 스타일은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 변경할 수 있습니다.
/// \code
/// NasWall.openPopupOfferWall { error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// } closeHandler: {
///     // 오퍼월 종료 시 처리 코드
/// }
///
/// \endcode\param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 오퍼월 열기 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
/// \param closeHandler 오퍼월이 종료된 후 호출되는 핸들러입니다.
///
+ (void)openPopupOfferWall:(void (^ _Nonnull)(NSError * _Nullable))handler closeHandler:(void (^ _Nullable)(void))closeHandler;
/// 제공된 <code>UIView</code>에 임베드 오퍼월을 표시합니다.
/// 오퍼월의 표시 색상 및 스타일은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 변경할 수 있습니다.
/// \code
/// struct EmbedOffer: UIViewRepresentable {
///     func makeUIView(context: Context) -> UIView {
///         let uiView = UIView()
///         NasWall.embedOfferWall(uiView) { error in
///             if error == nil {
///                 // 성공 시 처리 코드
///             } else {
///                 // 실패 시 처리 코드
///             }
///         }
///         return uiView
///     }
///
///     func updateUIView(_ uiView: UIView, context: Context) { }
/// }
///
/// // View 에서 사용
/// VStack {
///     EmbedOfferWall()
/// }
///
/// \endcode\param parent 임베드 오퍼월을 표시 할 <code>UIView</code> 객체를 지정합니다.
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 오퍼월 표시 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)embedOfferWall:(UIView * _Nonnull)parent handler:(void (^ _Nonnull)(NSError * _Nullable))handler;
/// 획득 가능한 총 적립금을 조회합니다.
/// \code
/// NasWall.totalPoint { pointInfo, error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>pointInfo</code>: 조회 성공 시 적립금 정보가 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 조회 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)totalPoint:(void (^ _Nonnull)(NasWallPointInfo * _Nullable, NSError * _Nullable))handler;
/// 광고 목록을 조회합니다. (개발자 정의 UI 전용)
/// important:
/// Swift UI Preview 상태에서는 라이브 데이터가 아닌 Preview 전용 데이터가 조회됩니다.
/// \code
/// NasWall.adList(.basic) { adList, error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param listType 조회 할 광고 목록 구분을 지정합니다.
/// <ul>
///   <li>
///     <code>.basic</code>: 참여적립 광고 목록 (CPI, CPE, CPA, CPC 등)
///   </li>
///   <li>
///     <code>.cps</code>: 쇼핑적립 광고 목록 (CPS)
///   </li>
///   <li>
///     <code>.cpq</code>: 퀴즈적립 광고 목록 (CPQ)
///   </li>
/// </ul>
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>adList</code>: 조회 성공 시 광고 목록이 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 조회 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)adList:(enum NasWallAdListType)listType handler:(void (^ _Nonnull)(NSArray<NasWallAdInfo *> * _Nullable, NSError * _Nullable))handler;
/// 광고 상세 설명을 조회합니다. (개발자 정의 UI 전용)
/// important:
/// Swift UI Preview 상태에서는 라이브 데이터가 아닌 Preview 전용 데이터가 조회됩니다.
/// \code
/// NasWall.adDescription(adInfo) { description, error in
///    if error == nil {
///        // 성공 시 처리 코드
///    } else {
///        // 실패 시 처리 코드
///    }
/// }
///
/// \endcode\param adInfo 광고 목록 조회 (<code>NasWall.adList()</code>) 함수를 통해 획득한 광고 목록 중 조회할 광고 정보를 지정합니다.
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>description</code>: 조회 성공 시 광고 상세 정보가 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 조회 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)adDescription:(NasWallAdInfo * _Nonnull)adInfo handler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))handler;
/// 광고에 참여합니다. (개발자 정의 UI 전용)
/// important:
/// Swift UI Preview 상태에서는 참여할 수 없습니다. 또한 시뮬레이터에서는 광고주 식별자(IDFA) 값이 없기 때문에 참여 시 오류가 발생합니다.
/// \code
/// NasWall.joinAd(adInfo) { error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param adInfo 광고 목록 조회 (<code>NasWall.adList()</code>) 함수를 통해 획득한 광고 목록 중 참여할 광고 정보를 지정합니다.
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 참여 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)joinAd:(NasWallAdInfo * _Nonnull)adInfo handler:(void (^ _Nonnull)(NSError * _Nullable))handler;
/// 회원 보유 적립금을 조회합니다. (NAS 서버에서 적립금 관리 시 사용)
/// important:
/// 초기화 (<code>NasWall.initialize()</code>) 함수를 통해 지정한 회원 ID (userId) 를 기준으로 조회됩니다.
/// important:
/// Swift UI Preview 상태에서는 라이브 데이터가 아닌 Preview 전용 데이터가 조회됩니다.
/// “적립금 관리 서버”가 “NAS 서버 사용”으로 설정된 경우에만 사용합니다.  “적립금 관리 서버” 설정은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 설정을 통해 확인 및 변경할 수 있습니다.
/// \code
/// NasWall.userPoint { pointInfo, error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>pointInfo</code>: 조회 성공 시 적립금 정보가 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 조회 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)userPoint:(void (^ _Nonnull)(NasWallPointInfo * _Nullable, NSError * _Nullable))handler;
/// 아이템 목록을 조회합니다. (NAS 서버에서 적립금 관리 시 사용)
/// important:
/// Swift UI Preview 상태에서는 라이브 데이터가 아닌 Preview 전용 데이터가 조회됩니다.
/// “적립금 관리 서버”가 “NAS 서버 사용”으로 설정된 경우에만 사용합니다.  “적립금 관리 서버” 설정은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 설정을 통해 확인 및 변경할 수 있습니다.
/// \code
/// NasWall.itemList { itemList, error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// }
///
/// \endcode\param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>itemList</code>: 조회 성공 시 아이템 목록이 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 조회 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)itemList:(void (^ _Nonnull)(NSArray<NasWallItemInfo *> * _Nullable, NSError * _Nullable))handler;
/// 회원 보유 적립금을 사용하여 아이템을 구입합니다. (NAS 서버에서 적립금 관리 시 사용)
/// important:
/// 초기화 (<code>NasWall.initialize()</code>) 함수를 통해 지정한 회원 ID (userId) 를 기준으로 구입됩니다.
/// important:
/// Swift UI Preview 상태에서는 구입할 수 없습니다.
/// “적립금 관리 서버”가 “NAS 서버 사용”으로 설정된 경우에만 사용합니다.  “적립금 관리 서버” 설정은 NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 설정을 통해 확인 및 변경할 수 있습니다.
/// \code
/// NasWall.purchaseItem(itemId, qty: 1) { pointInfo, error in
///     if error == nil {
///         // 성공 시 실행 코드
///     } else {
///         // 실패 시 실행 코드
///     }
/// }
///
/// \endcode\param itemId 구입 할 아이템 ID를 지정합니다. NAS 개발자 홈페이지의 “매체 관리” 메뉴에서 아이템을 등록하면, 아이템 ID를 확인할 수 있습니다.
///
/// \param qty 구입 수량을 지정합니다.
///
/// \param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>pointInfo</code>: 구입 성공 시 구입 금액을 차감한 잔여 적립금 정보가 제공됩니다.
///   </li>
///   <li>
///     <code>error</code>: 구입 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
+ (void)purchaseItem:(NSInteger)itemId qty:(NSInteger)qty handler:(void (^ _Nonnull)(NasWallPointInfo * _Nullable, NSError * _Nullable))handler;
/// 문의하기(전체 화면)를 표시합니다.
/// 임베드 오퍼월, 개발자 정의 UI 구현 시 회원에게 문의하기 기능을 제공합니다.
/// \code
/// NasWall.openCs { error in
///     if error == nil {
///         // 성공 시 처리 코드
///     } else {
///         // 실패 시 처리 코드
///     }
/// } closeHandler: {
///     // 문의하기 종료 시 처리 코드
/// }
///
/// \endcode\param handler 처리 완료 시 호출되는 핸들러입니다.
/// <ul>
///   <li>
///     <code>error</code>: 문의하기 열기 실패 시 오류 정보가 제공됩니다.
///   </li>
/// </ul>
///
/// \param closeHandler 문의하기가 종료된 후 호출되는 핸들러입니다.
///
+ (void)openCs:(void (^ _Nonnull)(NSError * _Nullable))handler closeHandler:(void (^ _Nullable)(void))closeHandler;
/// Preview 모드에서 Preview 전용 데이터 로드 시 지연 시간(초)을 설정합니다.
/// Preview 상태에서 데이터 로드 시 로딩 화면 표시를 확인하기 위해 사용합니다.
/// \code
/// NasWall.debugPreviewDataDelaySeconds(1)
///
/// \endcode\param seconds 지연 시간(초)을 지정합니다.
///
+ (void)debugPreviewDataDelaySeconds:(double)seconds;
/// Preview 모드에서 Preview 전용 데이터 로드 시 강제로 실패 처리할지 여부를 설정합니다.
/// Preview 상태에서 데이터 로드 실패 시의 화면 표시를 확인하기 위해 사용합니다.
/// \code
/// NasWall.debugPreviewDataForceFail(true)
///
/// \endcode\param forceFail 강제 실패 여부를 지정합니다.
///
+ (void)debugPreviewDataForceFail:(BOOL)forceFail;
/// 전체 화면으로 표시되는 로딩을 표시합니다.
/// \code
/// NasWall.showLoading()
///
/// \endcode
+ (void)showLoading;
/// 전체 화면으로 표시되는 로딩을 숨김니다.
/// \code
/// NasWall.hideLoading()
///
/// \endcode
+ (void)hideLoading;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 광고 카테고리
typedef SWIFT_ENUM(NSInteger, NasWallAdCategory, open) {
/// 앱
  NasWallAdCategoryApp = 1,
/// SNS
  NasWallAdCategorySns = 2,
/// WEB
  NasWallAdCategoryWeb = 3,
/// CPS
  NasWallAdCategoryCps = 4,
/// CPQ
  NasWallAdCategoryCpq = 5,
};

@class NasWallAdInfoInternal;
/// 광고 정보
SWIFT_CLASS("_TtC10NasWallKit13NasWallAdInfo")
@interface NasWallAdInfo : NSObject
/// ID
@property (nonatomic, readonly) NSInteger id;
/// 광고명
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// 미션
@property (nonatomic, readonly, copy) NSString * _Nonnull missionText;
/// 아이콘 URL
@property (nonatomic, readonly, copy) NSString * _Nonnull iconUrl;
/// 참여 비용
@property (nonatomic, readonly, copy) NSString * _Nonnull adPrice;
/// 적립금
@property (nonatomic, readonly) NSInteger rewardPrice;
/// 적립금 단위
@property (nonatomic, readonly, copy) NSString * _Nonnull rewardUnit;
/// 카테고리
@property (nonatomic, readonly) enum NasWallAdCategory category;
/// internal
@property (nonatomic, readonly, strong) NasWallAdInfoInternal * _Nonnull _internal;
/// Dictionary 로 변환
- (NSDictionary<NSString *, id> * _Nonnull)asDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// internal
SWIFT_CLASS("_TtC10NasWallKit21NasWallAdInfoInternal")
@interface NasWallAdInfoInternal : NSObject
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAk:(NSString * _Nonnull)ak ajsid:(NSInteger)ajsid atcid:(NSInteger)atcid tctid:(NSInteger)tctid ioclt:(BOOL)ioclt io:(BOOL)io pid:(NSString * _Nullable)pid us:(NSString * _Nullable)us OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)asDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 광고 목록 구분
typedef SWIFT_ENUM(NSInteger, NasWallAdListType, open) {
/// 참여적립 (CPI, CPE, CPA, CPC 등)
  NasWallAdListTypeBasic = 0,
/// 쇼핑적립 (CPS)
  NasWallAdListTypeCps = 1,
/// 퀴즈적립 (CPQ)
  NasWallAdListTypeCpq = 2,
};

/// 아이템 정보
SWIFT_CLASS("_TtC10NasWallKit15NasWallItemInfo")
@interface NasWallItemInfo : NSObject
/// ID
@property (nonatomic, readonly) NSInteger id;
/// 이름
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// 가격
@property (nonatomic, readonly) NSInteger price;
/// 가격 단위
@property (nonatomic, readonly, copy) NSString * _Nonnull unit;
/// Dictionary 로 변환
- (NSDictionary<NSString *, id> * _Nonnull)asDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC10NasWallKit16NasWallPointInfo")
@interface NasWallPointInfo : NSObject
/// 적립금
@property (nonatomic, readonly) NSInteger point;
/// 적립금 단위
@property (nonatomic, readonly, copy) NSString * _Nonnull unit;
/// 적립금 및 단위 텍스트
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
/// Dictionary 로 변환
- (NSDictionary<NSString *, id> * _Nonnull)asDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, NasWallTheme, open) {
  NasWallThemeLight = 0,
  NasWallThemeDark = 1,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
